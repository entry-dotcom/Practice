# #--------------------------------------------------で区切られているソースコードを順次実行する
#--------------------------------------------------
import numpy as np
import numpy.random as random
import scipy as sp
import pandas as pd
from pandas import Series, DataFrame

#　可視化ライブラリ
import matplotlib.pyplot as plt
import matplotlib as mpl
import seaborn as sns
%matplotlib inline

#　少数第三位まで表示
%precision 3


#--------------------------------------------------
#データの保存してあるディレクトリへ移動
cd ./chap3


#--------------------------------------------------
import six
import sys
sys.modules['sklearn.externals.six'] = six
# https://www.it-swarm-ja.tech/ja/python/python%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88%E3%82%A8%E3%83%A9%E3%83%BC%EF%BC%9A-%27sklearnexternals%27%E3%81%8B%E3%82%89%E5%90%8D%E5%89%8D-%27six%27%E3%82%92%E3%82%A4%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%9B%E3%82%93/816560837/
# 上記のサイトを参考にした．

#--------------------------------------------------
# キノコモデル（ここから実行する）
# キノコ（課題）
# 教科書に記載されていたURLからの読み込みがうまくできなかったので，直接データをダウンロードして使用した．
mushroom = pd.read_csv('agaricus-lepiota.data')

# データの列にラベルを設定
mushroom.columns = ['classes','cap_shape','cap_surface','cap_color','odor','bruises',
                             'gill_attachment','gill_spacing','gill_size','gill_color','stalk_shape',
                             'stalk_root','stalk_surface_above_ring','stalk_surface_below_ring',
                              'stalk_color_above_ring','stalk_color_below_ring','veil_type','veil_color',
                              'ring_number','ring_type','spore_print_color','population','habitat']

# 先頭5行を表示
mushroom.head()


#--------------------------------------------------
print('データの形式：{}'.format(mushroom.shape))
print('欠損の数：{}'.format(mushroom.isnull().sum().sum()))


#--------------------------------------------------
mushroom_dummy = pd.get_dummies(mushroom[['gill_color','gill_attachment','odor','cap_color']])
mushroom_dummy.head()


#--------------------------------------------------
# 目的変数もフラグ化(0/1)する
mushroom_dummy['flg'] = mushroom['classes'].map(lambda x: 1 if x == 'p' else 0)


#--------------------------------------------------
mushroom_dummy.groupby(['cap_color_c','flg'])['flg'].count().unstack()


#--------------------------------------------------
mushroom_dummy.groupby(['gill_color_b','flg'])['flg'].count().unstack()


#--------------------------------------------------
def calc_entropy(p):
    return - (p*np.log2(p) + (1-p) * np.log2(1-p))
    
    
#--------------------------------------------------
# pの値を0.001から0.999まで0.01刻みで動かす
p = np.arange(0.001,0.999,0.01)

# グラフ化
plt.plot(p,calc_entropy(p))
plt.xlabel('prob')
plt.ylabel('entropy')
plt.grid(True)


#--------------------------------------------------
mushroom_dummy.groupby('flg')['flg'].count()


#--------------------------------------------------
entropy_init = -(0.518*np.log2(0.518)+0.482 * np.log2(0.482))
print('毒キノコデータのエントロピ―の初期値：{:.3f}'.format(entropy_init))


#--------------------------------------------------
mushroom_dummy.groupby(['cap_color_c','flg'])['flg'].count().unstack()


#--------------------------------------------------
# cap_colorがcでない場合のエントロピ―
p1 = 4176/(4176+3903)
p2 = 1 - p1
entropy_c0 = -(p1*np.log2(p1)+p2*np.log2(p2))
print('entropy_c0: {:.3f}'.format(entropy_c0))


#--------------------------------------------------
# cap_colorがcである場合のエントロピ―
p1 = 32/(32+12)
p2 = 1 - p1
entropy_c1 = -(p1*np.log2(p1)+p2*np.log2(p2))
print('entropy_c1: {:.3f}'.format(entropy_c1))


#--------------------------------------------------
entropy_after = (4176+3903)/8124*entropy_c0 + (32+12)/8124*entropy_c1
print('データ分割後の平均エントロピー： {:.3f}'.format(entropy_after))


#--------------------------------------------------
print('変数cap_colorの分割によって得られる情報利得： {:.3f}'.format(entropy_init - entropy_after))


#--------------------------------------------------
mushroom_dummy.groupby(['gill_color_b','flg'])['flg'].count().unstack()


#--------------------------------------------------
# gill_colorがbでない場合のエントロピー
p1 = 4208/(4208+2187)
p2 = 1 - p1
entropy_b0 = -(p1*np.log2(p1) + p2*np.log2(p2))

# gill_colorがbである場合のエントロピー
p1 = 0/(0+1728)
p2 = 1 - p1
entropy_b1 = -(p2*np.log2(p2))

entropy_after = (4208+2187)/8124*entropy_b0 + (0+1728)/8124*entropy_b1
print('変数gill_colorの分割によって得られる情報利得：{:.3f}'.format(entropy_init - entropy_after))


#--------------------------------------------------
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

# データ分割
X = mushroom_dummy.drop('flg',axis=1)
y = mushroom_dummy['flg']
X_train,X_test,y_train,y_test = train_test_split(X,y,random_state=0)

# 決定木クラスの初期化と学習
model = DecisionTreeClassifier(criterion='entropy',max_depth=5,random_state=0)
model.fit(X_train,y_train)

print('正答率(train):{:.3f}'.format(model.score(X_train,y_train)))
print('正答率(test):{:.3f}'.format(model.score(X_test,y_test)))


#--------------------------------------------------
# 参考プログラム
# pydotplusやgraphvizの具体的な環境構築の方法は省略
from graphviz import Digraph
from sklearn import tree
import pydotplus
from sklearn.externals.six import StringIO
from IPython.display import Image

dot_data = StringIO()
tree.export_graphvis(model,out_file=dot_data)
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
Image(graph.create_png())
